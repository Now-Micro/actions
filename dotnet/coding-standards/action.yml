name: 'Coding Standards'
description: 'Ensure coding standards are met using analyzers'
author: 'Trafera'

inputs:
  debug-mode:
    description: 'Enable debug mode for additional logging.'
    required: false
    default: 'false'
  directory:
    description: 'Directory to run coding standards checks in.  This should be the root directory of your .NET solution.'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      if: inputs.node-project-path != ''
      uses: Now-Micro/actions/setup-node@v1

    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    - name: Get Project and Solution Files
      id: get-project-and-solution-files
      uses: Now-Micro/actions/get-project-and-solution-files-from-directory@v1
      with:
        directory: ${{ inputs.directory }}
        debug-mode: ${{ inputs.debug-mode }}
        find-project: 'true'
        max-depth: '3'

    - name: Get Solution Root Directory
      id: get-solution-root-directory
      # todo: replace this before publishing
      # uses: Now-Micro/actions/get-unique-root-directories@v1
      uses: ./get-unique-root-directories
      with:
        pattern: '^(.*)\/.+\.sln$'
        paths: ${{ steps.get-project-and-solution-files.outputs.solution-found }}
        debug-mode: ${{ inputs.debug-mode }}
        output-is-json: 'false'

    - name: Copy Relevant Files
      shell: bash
      run: node "$GITHUB_ACTION_PATH/copy-relevant-files.js"
      env:
        INPUT_UNIQUE_ROOT_DIRECTORIES: ${{ steps.get-solution-root-directory.outputs.unique_root_directories }}
        INPUT_DIRECTORY: ${{ inputs.directory }}
        INPUT_CODE_ANALYZERS_NAME: CodeStandards.Analyzers
        INPUT_SOURCE_DIR: ./dotnet/coding-standards

    - name: Print Solution Root Directory
      shell: bash
      run: |
        ls "${{ steps.get-solution-root-directory.outputs.unique_root_directories }}" -al
        ls "${{ steps.get-solution-root-directory.outputs.unique_root_directories }}/CodeStandards.Analyzers" -al

    - name: Get Relative Path
      id: get-relative-path
      shell: bash
      run: node "$GITHUB_ACTION_PATH/relative-path-finder.js"
      env: 
        INPUT_ROOT_FILE: ${{ steps.get-project-and-solution-files.outputs.solution-found }}
        INPUT_SUBDIRECTORY_FILE: ${{ steps.get-project-and-solution-files.outputs.project-found }}

    - name: Update CSProj File
      shell: bash
      run: node "$GITHUB_ACTION_PATH/update-csproj-file.js"
      env:
        INPUT_CODE_ANALYZERS_NAME: ${{ inputs.code-analyzers-name }}
        INPUT_PROJECT_FILE: ${{ steps.get-project-and-solution-files.outputs.project-found }}
        INPUT_INCLUDE_PATH: ${{ steps.get-relative-path.outputs.relative_path }}/CodeStandards.Analyzers/CodeStandards.Analyzers.csproj

    - name: Print File Root Directory
      shell: bash
      run: |
        set -e
        PROJ_FILE="${{ steps.get-project-and-solution-files.outputs.project-found }}"
        ROOT_DIR="${{ steps.get-solution-root-directory.outputs.unique_root_directories }}"
        ANALYZERS_DIR="$ROOT_DIR/CodeStandards.Analyzers"

        echo "== Project file directory =="
        echo "$PROJ_FILE"
        ls -al "$(dirname "$PROJ_FILE")"

        echo "== Solution root directory =="
        echo "$ROOT_DIR"
        ls -al "$ROOT_DIR"

        echo "== Analyzers directory =="
        echo "$ANALYZERS_DIR"
        ls -al "$ANALYZERS_DIR"

        echo "== Project file contents =="
        cat "$PROJ_FILE"

        echo "== Analyzer project file contents =="
        cat "$ANALYZERS_DIR/CodeStandards.Analyzers.csproj"

    - name: Restore
      shell: bash
      id: restore
      run: dotnet restore ${{ steps.get-project-and-solution-files.outputs.solution-found }}

    - name: Build Solution
      shell: bash
      if: steps.restore.outcome == 'success'
      run: dotnet build ${{ steps.get-project-and-solution-files.outputs.solution-found }} --no-restore

    # todo: need to remove the copied over files
