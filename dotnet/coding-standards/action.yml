name: 'Coding Standards'
description: 'Ensure coding standards are met using analyzers'
author: 'Trafera'

inputs:
  debug-mode:
    description: 'Enable debug mode for additional logging.'
    required: false
    default: 'false'
  directory:
    description: 'Directory to run coding standards checks in.  This should be the root directory of your .NET solution.'
    required: true
  code-analyzers-name:
    description: 'Name of the code analyzers project to copy to the target directory.'
    required: false
    default: 'CodeStandards.Analyzers'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      if: inputs.node-project-path != ''
      uses: Now-Micro/actions/setup-node@v1
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
    - name: Get Project and Solution Files
      id: get-project-and-solution-files
      # todo: use this when done
      # uses: Now-Micro/actions/get-project-and-solution-files-from-directory@v1
      uses: ./get-project-and-solution-files-from-directory
      with:
        directory: ${{ inputs.directory }}
        debug-mode: ${{ inputs.debug-mode }}
        max-depth: '5'

    - name: Get Solution Root Directory
      id: get-solution-root-directory
      uses: Now-Micro/actions/get-unique-root-directories@v1
      with:
        pattern: '^(.*)\/.*\.sln$'
        paths: ${{ steps.get-project-and-solution-files.outputs.solution-found }}
        debug-mode: ${{ inputs.debug-mode }}

    - name: Copy Relevant Files
      shell: bash
      run: node "$GITHUB_ACTION_PATH/copy-relevant-files.js"
      env:
        INPUT_UNIQUE_ROOT_DIRECTORIES: ${{ steps.get-solution-root-directory.outputs.unique_root_directories }}
        INPUT_DIRECTORY: ${{ inputs.directory }}
        INPUT_CODE_ANALYZERS_NAME: ${{ inputs.code-analyzers-name }}
        INPUT_SOURCE_DIR: ./demo/coding-standards

    - name: Print Solution Root Directory
      shell: bash
      run: |
        echo "${{ steps.get-solution-root-directory.outputs.unique_root_directories }}"

      # todo: finish this
    - name: Get the INPUT_INCLUDE_PATH
      id: get-include-path
      shell: bash
      run: |
        echo "include_path=${{ steps.get-solution-root-directory.outputs.unique_root_directories }}"  >> $GITHUB_OUTPUT

    - name: Inject Analyzer ProjectReference
      shell: bash
      run: node "$GITHUB_ACTION_PATH/inject-analyzer-reference.js"
      env:
        INPUT_CODE_ANALYZERS_NAME: ${{ inputs.code-analyzers-name }}
        INPUT_INCLUDE_PATH: ${{ steps.get-include-path.outputs.include_path }}
        INPUT_PROJECT_FILE: ${{ steps.get-project-and-solution-files.outputs.project-found }}

    - name: Restore
      shell: bash
      id: restore
      run: dotnet restore ${{ steps.get-project-and-solution-files.outputs.solution-found }}

    - name: Build Solution
      shell: bash
      if: steps.restore.outcome == 'success'
      run: dotnet build ${{ steps.get-project-and-solution-files.outputs.solution-found }} --no-restore

    # todo: need to remove the copied over files
