name: 'Coding Standards'
description: 'Ensure coding standards are met using analyzers'
author: 'Trafera'

inputs:
  directory:
    description: 'Directory to run coding standards checks in.  This should be the root directory of your .NET solution.'
    required: true
  code-analyzers-name:
    description: 'Name of the code analyzers project to copy to the target directory.'
    required: false
    default: 'CodeStandards.Analyzers'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      if: inputs.node-project-path != ''
      uses: Now-Micro/actions/setup-node@v1
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
    - name: Get Project and Solution Files
      id: get-project-and-solution-files
      uses: Now-Micro/actions/get-project-and-solution-files-from-directory@v1
      with:
        directory: ${{ inputs.directory }}
    - name: Get Solution Root Directory
      id: get-solution-root-directory
      uses: Now-Micro/actions/get-unique-root-directories@v1
      with:
        pattern: '^(.*)\/.*\.sln$'
        paths: ${{ steps.get-project-and-solution-files.outputs.solution-found }}
    - name: Copy Relevant Files
      shell: bash
      run: |
        set -euo pipefail
        RAW='${{ steps.get-solution-root-directory.outputs.unique_root_directories }}'
        # Parse JSON array (e.g. ["/path/to/root"]) using bash without jq
        ROOT=$(echo "$RAW" | sed -e 's/^\[\"//' -e 's/\"\]$//' )
        if [ -z "$ROOT" ] || [ "$ROOT" = "$RAW" ]; then
          echo "Falling back to inputs.directory"
          ROOT='${{ inputs.directory }}'
        fi
        echo "Directory: ${{ inputs.directory }}"
        echo "Solution File: ${{ steps.get-project-and-solution-files.outputs.solution-found }}"
        echo "Project File: ${{ steps.get-project-and-solution-files.outputs.project-found }}"
        echo "Derived Root: $ROOT"
        SRC_DIR="./demo/coding-standards"
        # Ensure target directories exist
        mkdir -p "$ROOT" "$ROOT/${{ inputs.code-analyzers-name }}$" "$ROOT/${{ inputs.code-analyzers-name }}$/Demo.Analyzers"
        # Resolve absolute paths to safely compare
        src_abs=$(cd "$SRC_DIR" && pwd)
        root_abs=$(cd "$ROOT" && pwd)
        echo "Source Dir: $src_abs"
        echo "Root Dir:   $root_abs"
        # Copy .editorconfig only if contents differ (or destination missing)
        DEST_FILE="$ROOT/.editorconfig"
        if [ -f "$DEST_FILE" ] && cmp -s "$SRC_DIR/.editorconfig" "$DEST_FILE"; then
          echo ".editorconfig is up to date; skipping copy"
        else
          cp -f "$SRC_DIR/.editorconfig" "$DEST_FILE"
        fi
        # Always refresh analyzers into target (matching injected path)
        cp -fR "$SRC_DIR/analyzers/Demo.Analyzers/." "$ROOT/${{ inputs.code-analyzers-name }}$/Demo.Analyzers/"
        ls -al "$ROOT"

    - name: Inject Analyzer ProjectReference
      shell: bash
      run: |
        set -euo pipefail
        PROJ='${{ steps.get-project-and-solution-files.outputs.project-found }}'
        if [ -z "$PROJ" ] || [ ! -f "$PROJ" ]; then
          echo "No project file found to modify"; exit 0;
        fi
        # Skip if an Analyzer ProjectReference already exists
        if grep -q 'OutputItemType="Analyzer"' "$PROJ"; then
          echo "Analyzer ProjectReference already present; skipping insert"; exit 0;
        fi
        inc_path="..\\..\\${{ inputs.code-analyzers-name }}$\\Demo.Analyzers\\Demo.Analyzers.csproj"
        tmpinj="$(mktemp)"
        {
          echo '  <ItemGroup>'
          echo '    <ProjectReference'
          echo "      Include=\"$inc_path\""
          echo '      OutputItemType="Analyzer"'
          echo '      ReferenceOutputAssembly="false"'
          echo '    />'
          echo '  </ItemGroup>'
        } > "$tmpinj"
        tmpfile="$(mktemp)"
        awk -v injfile="$tmpinj" '
          BEGIN {
            while ((getline line < injfile) > 0) { inj = inj line ORS }
            close(injfile)
            done=0
          }
          /<\/Project>/ && !done { printf "%s", inj; done=1 }
          { print }
        ' "$PROJ" > "$tmpfile"
        mv "$tmpfile" "$PROJ"
        echo "Inserted Analyzer ProjectReference into $PROJ"
        cat "$PROJ"

    - name: Build Solution
      shell: bash
      run: dotnet build ${{ steps.get-project-and-solution-files.outputs.solution-found }}

    # todo: need to remove the copied over files
