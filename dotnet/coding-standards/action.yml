name: 'Coding Standards'
description: 'Ensure coding standards are met using analyzers'
author: 'Trafera'

inputs:
  directory:
    description: 'Directory to run coding standards checks in.  This should be the root directory of your .NET solution.'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      if: inputs.node-project-path != ''
      uses: Now-Micro/actions/setup-node@v1
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
    - name: Get Project and Solution Files
      id: get-project-and-solution-files
      uses: Now-Micro/actions/get-project-and-solution-files-from-directory@v1
      with:
        directory: ${{ inputs.directory }}
    - name: Get Solution Root Directory
      id: get-solution-root-directory
      uses: Now-Micro/actions/get-unique-root-directories@v1
      with:
        pattern: '^(.*)\/.*\.sln$'
        paths: ${{ steps.get-project-and-solution-files.outputs.solution-found }}
    - name: Copy Relevant Files
      shell: bash
      run: |
        set -euo pipefail
        RAW='${{ steps.get-solution-root-directory.outputs.unique_root_directories }}'
        # Parse JSON array (e.g. ["/path/to/root"]) using bash without jq
        ROOT=$(echo "$RAW" | sed -e 's/^\[\"//' -e 's/\"\]$//' )
        if [ -z "$ROOT" ] || [ "$ROOT" = "$RAW" ]; then
          echo "Falling back to inputs.directory"
          ROOT='${{ inputs.directory }}'
        fi
        echo "Directory: ${{ inputs.directory }}"
        echo "Solution File: ${{ steps.get-project-and-solution-files.outputs.solution-found }}"
        echo "Project File: ${{ steps.get-project-and-solution-files.outputs.project-found }}"
        echo "Derived Root: $ROOT"
        SRC_DIR="./demo/coding-standards"
        # Ensure target directories exist
        mkdir -p "$ROOT" "$ROOT/Demo.Analyzers"
        # Resolve absolute paths to safely compare
        src_abs=$(cd "$SRC_DIR" && pwd)
        root_abs=$(cd "$ROOT" && pwd)
        echo "Source Dir: $src_abs"
        echo "Root Dir:   $root_abs"
        # Copy .editorconfig only if contents differ (or destination missing)
        DEST_FILE="$ROOT/.editorconfig"
        if [ -f "$DEST_FILE" ] && cmp -s "$SRC_DIR/.editorconfig" "$DEST_FILE"; then
          echo ".editorconfig is up to date; skipping copy"
        else
          cp -f "$SRC_DIR/.editorconfig" "$DEST_FILE"
        fi
        # Always refresh analyzers into target (different subpath)
        cp -fR "$SRC_DIR/analyzers/Demo.Analyzers/." "$ROOT/Demo.Analyzers/"
        ls -al "$ROOT"
    # Todo: move this into Nodejs?
    # - name: Add ItemGroup to Solution
    #   shell: bash
    #   run: dotnet sln add ./Demo.Analyzers/Demo.Analyzers.csproj

    - name: Build Solution
      shell: bash
      run: dotnet build ${{ inputs.directory }} --no-restore
