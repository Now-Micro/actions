name: Demo Test - Get Project and Solution Files
on:
  workflow_dispatch:

jobs:
  demo-locate-files:
    runs-on: ubuntu-latest
    steps:
      - name: Setup summary file
        run: |
          echo "SUMMARY_FILE=$GITHUB_WORKSPACE/demo-get-proj-soln-summary.txt" >> $GITHUB_ENV
          : > $GITHUB_WORKSPACE/demo-get-proj-soln-summary.txt

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List demo tree (informational)
        run: |
          echo "Demo directory structure:" 
          find demo/get-project-and-solution-files-from-directory -maxdepth 8 -print

      - name: Test 1 - Find root solution with depth=1
        id: root_solution
        uses: ./get-project-and-solution-files-from-directory
        with:
          debug-mode: 'true'
          directory: demo/get-project-and-solution-files-from-directory
          max-depth: 1

      - name: Assert 1 - Root solution is SampleSolution.sln
        uses: ./testing/assert
        with:
          expected: RootSolution.sln
          actual: ${{ steps.root_solution.outputs.solution-found }}
          mode: present
          test-name: Test 1 - Root solution
          summary-file: ${{ env.SUMMARY_FILE }}

      - name: Test 2 - Shallow project search depth=2
        id: project_shallow
        uses: ./get-project-and-solution-files-from-directory
        with:
          debug-mode: 'true'
          directory: demo/get-project-and-solution-files-from-directory
          find-solution: 'false'
          find-project: 'true'
          max-depth: 2

      - name: Assert 2 - No project found at shallow depth
        uses: ./testing/assert
        with:
          # expected: '' would fail the test since assert is expecting a value for expected
          expected: /^\s*$/
          actual: ${{ steps.project_shallow.outputs.project-found }}
          mode: regex
          test-name: Test 2 - Shallow project none
          summary-file: ${{ env.SUMMARY_FILE }}

      - name: Test 3 - Project search depth=4
        id: project_appa
        uses: ./get-project-and-solution-files-from-directory
        with:
          debug-mode: 'true'
          directory: demo/get-project-and-solution-files-from-directory
          find-solution: 'false'
          find-project: 'true'
          max-depth: 4

      - name: Assert 3 - First project is AppA.csproj
        uses: ./testing/assert
        with:
          expected: AppA.csproj
          actual: ${{ steps.project_appa.outputs.project-found }}
          mode: endswith
          test-name: Test 3 - First project AppA
          summary-file: ${{ env.SUMMARY_FILE }}

      - name: Test 4 - Solution & project inside SolutionB
        id: solutionb
        uses: ./get-project-and-solution-files-from-directory
        with:
          debug-mode: 'true'
          directory: demo/get-project-and-solution-files-from-directory/SolutionB
          find-solution: 'true'
          find-project: 'true'
          max-depth: 4

      - name: Assert 4 - SolutionB solution and Service.csproj detected (solution)
        uses: ./testing/assert
        with:
          expected: SolutionB.sln
          actual: ${{ steps.solutionb.outputs.solution-found }}
          mode: endswith
          test-name: Test 4a - SolutionB solution
          summary-file: ${{ env.SUMMARY_FILE }}
      - name: Assert 4b - SolutionB project Service.csproj detected
        uses: ./testing/assert
        with:
          expected: Service.csproj
          actual: ${{ steps.solutionb.outputs.project-found }}
          mode: endswith
          test-name: Test 4b - SolutionB project
          summary-file: ${{ env.SUMMARY_FILE }}

      - name: Test 5 - Deep nested search (max-depth=15)
        id: deep_nested
        uses: ./get-project-and-solution-files-from-directory
        with:
          debug-mode: 'true'
          directory: demo/get-project-and-solution-files-from-directory
          find-solution: 'false'
          find-project: 'true'
          max-depth: 15

      - name: Assert 5 - Deep search returns earliest project (AppA.csproj)
        uses: ./testing/assert
        with:
          expected: AppA.csproj
          actual: ${{ steps.deep_nested.outputs.project-found }}
          mode: endswith
          test-name: Test 5 - Deep earliest project
          summary-file: ${{ env.SUMMARY_FILE }}

      - name: Summary
        if: always()
        run: |
          echo "### Demo get-project-and-solution-files-from-directory" >> $GITHUB_STEP_SUMMARY
          echo "All Tests (PASS indicates assertion success):" >> $GITHUB_STEP_SUMMARY
          cat "$SUMMARY_FILE" >> $GITHUB_STEP_SUMMARY
