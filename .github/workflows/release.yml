name: Release main

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name to release (identifier)'
        required: true
        type: string
      name:
        description: 'Release name (defaults to tag)'
        required: false
        type: string
      body:
        description: 'Release notes body (optional; ignored if generate-release-notes=true)'
        required: false
        type: string
      target:
        description: 'Target commitish (branch or SHA). Ignored if tag already exists.'
        required: false
        type: string
        default: main
      draft:
        description: 'Create as draft'
        required: false
        type: boolean
        default: false
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false
      generate-release-notes:
        description: 'Auto-generate release notes'
        required: false
        type: boolean
        default: true
      should-delete-current:
        description: 'Should delete current release if one already exists for this tag?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  publish:
    name: Publish release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_or_reuse.outputs.release_id }}
      html_url: ${{ steps.create_or_reuse.outputs.html_url }}
      upload_url: ${{ steps.create_or_reuse.outputs.upload_url }}

    steps:
      - name: Check for existing release by tag
        id: get
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = `${{ inputs.tag }}`;
            try {
              const { data } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag,
              });
              core.setOutput('exists', 'true');
              core.setOutput('id', String(data.id));
              core.setOutput('html_url', data.html_url || '');
              core.setOutput('upload_url', data.upload_url || '');
            } catch (e) {
              if (e.status === 404) {
                core.info(`No existing release for tag ${tag}`);
                core.setOutput('exists', 'false');
              } else {
                throw e;
              }
            }

      - name: Delete existing release (if requested)
        if: ${{ steps.get.outputs.exists == 'true' && inputs["should-delete-current"] }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release_id = Number(`${{ steps.get.outputs.id }}`);
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id,
            });
            core.info(`Deleted existing release id ${release_id}`);

      - name: Use existing release (no delete requested)
        id: create_or_reuse
        if: ${{ steps.get.outputs.exists == 'true' && !inputs["should-delete-current"] }}
        run: |
          echo "release_id=${{ steps.get.outputs.id }}" >> $GITHUB_OUTPUT
          echo "html_url=${{ steps.get.outputs.html_url }}" >> $GITHUB_OUTPUT
          echo "upload_url=${{ steps.get.outputs.upload_url }}" >> $GITHUB_OUTPUT

      - name: Create release
        id: create
        if: ${{ steps.get.outputs.exists != 'true' || inputs["should-delete-current"] }}
        uses: actions/github-script@v7
        env:
          INPUT_TAG: ${{ inputs.tag }}
          INPUT_NAME: ${{ inputs.name }}
          INPUT_BODY: ${{ inputs.body }}
          INPUT_TARGET: ${{ inputs.target }}
          INPUT_DRAFT: ${{ inputs.draft }}
          INPUT_PRERELEASE: ${{ inputs.prerelease }}
          INPUT_GENERATE_NOTES: ${{ inputs["generate-release-notes"] }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = process.env.INPUT_TAG;
            const name = (process.env.INPUT_NAME && process.env.INPUT_NAME.trim()) || tag;
            const body = (process.env.INPUT_BODY && process.env.INPUT_BODY.length ? process.env.INPUT_BODY : undefined);
            const target = (process.env.INPUT_TARGET && process.env.INPUT_TARGET.trim()) || undefined;
            const draft = /^true$/i.test(process.env.INPUT_DRAFT || '');
            const prerelease = /^true$/i.test(process.env.INPUT_PRERELEASE || '');
            const generate_release_notes = /^true$/i.test(process.env.INPUT_GENERATE_NOTES || '');

            const params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name,
              draft,
              prerelease,
              generate_release_notes,
            };
            if (body && !generate_release_notes) params.body = body;
            if (target) params.target_commitish = target;

            const { data } = await github.rest.repos.createRelease(params);
            core.setOutput('release_id', String(data.id));
            core.setOutput('html_url', data.html_url || '');
            core.setOutput('upload_url', data.upload_url || '');

      - name: Bubble outputs
        id: create_or_reuse_finalize
        if: ${{ steps.create.outcome == 'success' }}
        run: |
          echo "release_id=${{ steps.create.outputs.release_id }}" >> $GITHUB_OUTPUT
          echo "html_url=${{ steps.create.outputs.html_url }}" >> $GITHUB_OUTPUT
          echo "upload_url=${{ steps.create.outputs.upload_url }}" >> $GITHUB_OUTPUT

      - name: Summary
        if: always()
        run: |
          echo "Release tag: ${{ inputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "Deleted existing: ${{ steps.get.outputs.exists == 'true' && inputs["should-delete-current"] }}" >> $GITHUB_STEP_SUMMARY
          echo "Release URL: ${{ steps.create_or_reuse.outputs.html_url || steps.create_or_reuse_finalize.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
