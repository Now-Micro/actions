name: Demo - Get Unique Root Directories
on:
  workflow_dispatch: {}

jobs:
  demo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: ./setup-node
      - name: Prepare summary file path
        id: pre
        run: echo "summary_file=$(pwd)/urd-summary.txt" >> $GITHUB_OUTPUT
      - name: extracts unique roots
        id: t1
        uses: ./get-unique-root-directories
        with:
          pattern: '^(src/[^/]+)/'
          paths: 'src/Api/Program.cs,src/Api/Controllers/Home.cs,src/Lib/Util.cs'
          debug-mode: 'true'
      - name: assert t1 output
        uses: ./testing/assert
        with:
          test-name: 'extracts unique roots array'
          summary-file: ${{ steps.pre.outputs.summary_file }}
          mode: exact
          expected: '["src/Api","src/Lib"]'
          actual: ${{ steps.t1.outputs.unique_root_directories }}
      - name: no matches writes empty array
        id: t2
        uses: ./get-unique-root-directories
        with:
          pattern: '^(foo)/'
          paths: 'src/Api/Program.cs'
          debug-mode: 'true'
      - name: assert t2 output
        uses: ./testing/assert
        with:
          test-name: 'no matches empty'
          summary-file: ${{ steps.pre.outputs.summary_file }}
          mode: exact
          expected: '[]'
          actual: ${{ steps.t2.outputs.unique_root_directories }}
      - name: invalid regex exits 1
        id: t3
        run: |
          set +e
          node - <<'EOF'
          process.env.INPUT_PATTERN='([unclosed';
          process.env.INPUT_PATHS='a,b';
          const { run } = require('./get-unique-root-directories/unique-root-directories');
          try { run(); } catch {}
          EOF
          echo "code=$?" >> $GITHUB_OUTPUT
      - name: assert invalid regex failed
        uses: ./testing/assert
        with:
          test-name: 'invalid regex exits 1'
          summary-file: ${{ steps.pre.outputs.summary_file }}
          mode: exact
          expected: '1'
          actual: ${{ steps.t3.outputs.code || '1' }}
      - name: missing pattern exits 1
        id: t4
        run: |
          set +e
          node - <<'EOF'
          process.env.INPUT_PATHS='a,b';
          const { run } = require('./get-unique-root-directories/unique-root-directories');
          try { run(); } catch {}
          EOF
          echo "code=$?" >> $GITHUB_OUTPUT
      - name: assert missing pattern failure
        uses: ./testing/assert
        with:
          test-name: 'missing pattern exits 1'
          summary-file: ${{ steps.pre.outputs.summary_file }}
          mode: exact
          expected: '1'
          actual: ${{ steps.t4.outputs.code || '1' }}
      - name: duplicates only logged once
        id: t5
        uses: ./get-unique-root-directories
        with:
          pattern: '^(src/Api)/'
          paths: 'src/Api/One.cs,src/Api/Two.cs'
          debug-mode: 'true'
      - name: assert duplicates output
        uses: ./testing/assert
        with:
          test-name: 'duplicates single root'
          summary-file: ${{ steps.pre.outputs.summary_file }}
          mode: exact
          expected: '["src/Api"]'
          actual: ${{ steps.t5.outputs.unique_root_directories }}
      - name: multiple duplicates across three unique roots
        id: t6
        uses: ./get-unique-root-directories
        with:
          pattern: '^(src/[^/]+)/'
          paths: 'src/Api/Program.cs,src/Api/Program.cs,src/Api/Controllers/Home.cs,src/Lib/Lib.cs,src/Lib/Lib.cs,src/Util/Helper.cs,src/Util/Helper.cs,src/Util/Another.cs'
          debug-mode: 'true'
      - name: assert three roots
        uses: ./testing/assert
        with:
          test-name: 'three unique roots'
          summary-file: ${{ steps.pre.outputs.summary_file }}
          mode: exact
          expected: '["src/Api","src/Lib","src/Util"]'
          actual: ${{ steps.t6.outputs.unique_root_directories }}
      - name: complex pattern valid
        id: t7
        uses: ./get-unique-root-directories
        with:
          pattern: '^([^/]+)/(src|tests?)/.*\.(cs|csproj|sln)$'
          paths: 'ProjectA/src/Program.cs,ProjectA/src/Utils/Helper.cs,ProjectB/test/ProjectB.csproj,ProjectB/tests/Another.cs,ProjectC/tests/Solution.sln,ProjectC/test/Other.cs,My-App/src/Util.cs,My.App/tests/Suite.sln,ProjectD/lib/Program.cs,ProjectE/src/README.md,/ProjectF/src/Program.cs,ProjectG/tests/Program.txt,ProjectH/src/Dir,ProjectI/tests/Program.csx'
          debug-mode: 'true'
      - name: assert complex pattern roots
        uses: ./testing/assert
        with:
          test-name: 'complex pattern roots'
          summary-file: ${{ steps.pre.outputs.summary_file }}
          mode: exact
          expected: '["ProjectA","ProjectB","ProjectC","My-App","My.App"]'
          actual: ${{ steps.t7.outputs.unique_root_directories }}
      - name: complex pattern no matches
        id: t8
        uses: ./get-unique-root-directories
        with:
          pattern: '^([^/]+)/(src|tests?)/.*\.(cs|csproj|sln)$'
          paths: 'Alpha/lib/File.cs,Beta/source/Program.cs,Gamma/src/Readme.md,/Delta/src/Program.cs,Epsilon/tests/Notes.txt,Zeta/src/Folder'
          debug-mode: 'true'
      - name: assert complex no matches
        uses: ./testing/assert
        with:
          test-name: 'complex pattern no matches'
          summary-file: ${{ steps.pre.outputs.summary_file }}
          mode: exact
          expected: '[]'
          actual: ${{ steps.t8.outputs.unique_root_directories }}
      - name: caret pattern extracts roots
        id: t9
        uses: ./get-unique-root-directories
        with:
          pattern: '^([^/.]+)/'
          paths: 'Alpha/src/File.cs,Beta/tests/Test.cs,Alpha/docs/Readme.md,Gamma/one/two/three.txt,Bad.Root/src/File.cs,.hidden/src/File.cs,delta/,epsilon,foo.bar/,my-app/src/index.cs,my_app/src/index.cs,Zeta/Another.cs,Alpha/more/Deeper.cs,  Beta/space.cs'
          debug-mode: 'true'
      - name: assert caret pattern roots
        uses: ./testing/assert
        with:
          test-name: 'caret simple pattern roots'
          summary-file: ${{ steps.pre.outputs.summary_file }}
          mode: exact
          expected: '["Alpha","Beta","Gamma","delta","my-app","my_app","Zeta"]'
          actual: ${{ steps.t9.outputs.unique_root_directories }}
      - name: caret pattern duplicates
        id: t10
        uses: ./get-unique-root-directories
        with:
          pattern: '^([^/.]+)/'
          paths: 'Proj/one.cs,Proj/two.cs,Proj/three.cs,Other/file.cs,Other/file2.cs'
          debug-mode: 'true'
      - name: assert caret pattern duplicates
        uses: ./testing/assert
        with:
          test-name: 'caret duplicates'
          summary-file: ${{ steps.pre.outputs.summary_file }}
          mode: exact
          expected: '["Proj","Other"]'
          actual: ${{ steps.t10.outputs.unique_root_directories }}
      - name: caret pattern no matches
        id: t11
        uses: ./get-unique-root-directories
        with:
          pattern: '^([^/.]+)/'
          paths: '.hidden,with.dot,.hidden/file,bad.root/file,onlyfile,/leading/slash/file'
          debug-mode: 'true'
      - name: assert caret pattern no matches
        uses: ./testing/assert
        with:
          test-name: 'caret no matches'
          summary-file: ${{ steps.pre.outputs.summary_file }}
          mode: exact
          expected: '[]'
          actual: ${{ steps.t11.outputs.unique_root_directories }}
      - name: Testing pattern in Codebits
        id: t12
        uses: ./get-unique-root-directories
        with:
          pattern: '^([^\/]+)\/(src|tests?)\/.*\.(cs|csproj|sln)$'
          paths: 'Solution1/src/Api/Program.cs,Solution1/src/Api/Program.cs,Solution1/src/Api/Controllers/Home.cs,Solution1/src/Lib/Lib.cs,Solution1/src/Lib/Lib.cs,Solution1/src/Util/Helper.cs,Solution1/src/Util/Helper.cs,Solution1/src/Util/Another.cs,Solution2/tests/Util/Another.cs,Solution3/tests/Test.cs,SkipSolution1/example/tests/README.md,SkipSolution2/src/Api/README.md,SkipSolution3/README.md'
          debug-mode: 'true'
      - name: assert Solution 1,2,3 roots
        uses: ./testing/assert
        with:
          test-name: 'Testing Regex 1,2,3 roots'
          summary-file: ${{ steps.pre.outputs.summary_file }}
          mode: exact
          expected: '["Solution1","Solution2","Solution3"]'
          actual: ${{ steps.t12.outputs.unique_root_directories }}
      - name: Linting pattern in Codebits
        id: t13
        uses: ./get-unique-root-directories
        with:
          pattern: '^([^/.]+)/'
          paths: 'Solution1/src/Api/Program.cs, Solution1/src/Api/Program.cs, Solution1/src/Api/Controllers/Home.cs, Solution1/src/Lib/Lib.cs, Solution1/src/Lib/Lib.cs, Solution1/src/Util/Helper.cs, Solution1/src/Util/Helper.cs, Solution1/src/Util/Another.cs, Solution2/tests/Util/Another.cs, Solution3/tests/Test.cs, Solution4/example/tests/README.md, Solution5/src/Api/README.md, Solution6/README.md'
          debug-mode: 'true'
      - name: assert linting Solution 1,2,3 roots
        uses: ./testing/assert
        with:
          test-name: 'Linting Regex 1,2,3 roots'
          summary-file: ${{ steps.pre.outputs.summary_file }}
          mode: exact
          expected: '["Solution1","Solution2","Solution3"]'
          actual: ${{ steps.t13.outputs.unique_root_directories }}
      - name: Summarize
        if: always()
        run: |
          echo '=== Unique Root Directories Demo Summary ===' >> $GITHUB_STEP_SUMMARY
          cat ${{ steps.pre.outputs.summary_file }} >> $GITHUB_STEP_SUMMARY
