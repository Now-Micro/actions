name: Demo - Generate Version
description: Demonstrates the generate-version action reading csproj or releases and asserts basic shape

author: Trafera

inputs:
  infix:
    description: "Optional infix to include between version and timestamp"
    required: false
    default: "demo"

runs:
  using: composite
  steps:
    - name: Prepare summary and temp project
      id: pre
      shell: bash
      run: |
        echo "summary_file=$(pwd)/gv-summary.txt" >> "$GITHUB_OUTPUT"
        # ensure summary file exists to avoid cat errors if earlier steps fail
        touch "$(pwd)/gv-summary.txt"
        mkdir -p _gv
        cat > _gv/Demo.App.csproj <<'EOF'
        <Project Sdk="Microsoft.NET.Sdk">
          <PropertyGroup>
            <TargetFramework>net8.0</TargetFramework>
            <Version>2.3.4-beta</Version>
          </PropertyGroup>
        </Project>
        EOF
        echo "project_file=$(pwd)/_gv/Demo.App.csproj" >> "$GITHUB_OUTPUT"

    - name: Run generate-version (csproj)
      id: csproj
      uses: ./generate-version
      with:
        project-file: ${{ steps.pre.outputs.project_file }}
        infix-value: ${{ inputs.infix }}

    - name: Assert version shape (csproj)
      uses: ./testing/assert
      with:
        test-name: "version from csproj has timestamp"
        summary-file: ${{ steps.pre.outputs.summary_file }}
        mode: regex
        expected: '^\d+\.\d+\.\d+-[A-Za-z0-9]+-\d{12}$'
        actual: ${{ steps.csproj.outputs['version-number'] }}

    - name: Assert default patch bump (csproj)
      uses: ./testing/assert
      with:
        test-name: "default patch bump from 2.3.4 -> 2.3.5"
        summary-file: ${{ steps.pre.outputs.summary_file }}
        mode: regex
        expected: '^2\.3\.5-'
        actual: ${{ steps.csproj.outputs['version-number'] }}

    - name: Run generate-version (releases - initial version)
      id: rel_initial
      uses: ./generate-version
      with:
        project-file: ${{ steps.pre.outputs.project_file }}
        infix-value: ${{ inputs.infix }}
        release-keyword: "initial"

    - name: Assert version shape (releases - initial version)
      uses: ./testing/assert
      with:
        test-name: "version from releases (initial version) has timestamp"
        summary-file: ${{ steps.pre.outputs.summary_file }}
        mode: regex
        expected: '^\d+\.\d+\.\d+-[A-Za-z0-9]+-\d{12}$'
        actual: ${{ steps.rel_initial.outputs['version-number'] }}

    - name: Assert base version is 1.0.0 (releases - initial version)
      uses: ./testing/assert
      with:
        test-name: "base version 1.0.1 for initial version keyword (patch bump)"
        summary-file: ${{ steps.pre.outputs.summary_file }}
        mode: regex
        expected: '^1\.0\.1-'
        actual: ${{ steps.rel_initial.outputs['version-number'] }}

    - name: Run generate-version (csproj - minor bump)
      id: csproj_minor
      uses: ./generate-version
      with:
        project-file: ${{ steps.pre.outputs.project_file }}
        infix-value: ${{ inputs.infix }}
        increment-type: minor

    - name: Assert minor bump (csproj)
      uses: ./testing/assert
      with:
        test-name: "minor bump from 2.3.4 -> 2.4.0"
        summary-file: ${{ steps.pre.outputs.summary_file }}
        mode: regex
        expected: '^2\.4\.0-'
        actual: ${{ steps.csproj_minor.outputs['version-number'] }}

    - name: Run generate-version (csproj - major bump)
      id: csproj_major
      uses: ./generate-version
      with:
        project-file: ${{ steps.pre.outputs.project_file }}
        infix-value: ${{ inputs.infix }}
        increment-type: major

    - name: Assert major bump (csproj)
      uses: ./testing/assert
      with:
        test-name: "major bump from 2.3.4 -> 3.0.0"
        summary-file: ${{ steps.pre.outputs.summary_file }}
        mode: regex
        expected: '^3\.0\.0-'
        actual: ${{ steps.csproj_major.outputs['version-number'] }}

    - name: Summarize
      if: always()
      shell: bash
      run: |
        echo '=== Generate Version Demo Summary ===' >> "$GITHUB_STEP_SUMMARY"
        if [ -f "${{ steps.pre.outputs.summary_file }}" ]; then
          cat "${{ steps.pre.outputs.summary_file }}" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "(no per-step summary file present)" >> "$GITHUB_STEP_SUMMARY"
        fi
        # Include key outputs for quick reference
        if [ -n "${{ steps.csproj.outputs['version-number'] }}" ]; then
          echo "Csproj (default patch): ${{ steps.csproj.outputs['version-number'] }}" >> "$GITHUB_STEP_SUMMARY"
        fi
        if [ -n "${{ steps.csproj_minor.outputs['version-number'] }}" ]; then
          echo "Csproj (minor bump): ${{ steps.csproj_minor.outputs['version-number'] }}" >> "$GITHUB_STEP_SUMMARY"
        fi
        if [ -n "${{ steps.csproj_major.outputs['version-number'] }}" ]; then
          echo "Csproj (major bump): ${{ steps.csproj_major.outputs['version-number'] }}" >> "$GITHUB_STEP_SUMMARY"
        fi
        if [ -n "${{ steps.rel.outputs['version-number'] }}" ]; then
          echo "Release keyword output: ${{ steps.rel.outputs['version-number'] }}" >> "$GITHUB_STEP_SUMMARY"
        fi
        if [ -n "${{ steps.rel_initial.outputs['version-number'] }}" ]; then
          echo "Initial version keyword output: ${{ steps.rel_initial.outputs['version-number'] }}" >> "$GITHUB_STEP_SUMMARY"
        fi
