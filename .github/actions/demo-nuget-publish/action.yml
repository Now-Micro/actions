name: Demo - NuGet Publish
description: Demo for nuget/publish composite action

inputs:
  additional-build-args:
    description: "Additional arguments to pass to dotnet build"
    required: false
    default: ""
  additional-pack-args:
    description: "Additional arguments to pass to dotnet pack"
    required: false
    default: ""
  directory:
    description: "Directory to search for project"
    required: false
    default: "src/demo/dotnet/src/Api"
  github-token:
    description: "GitHub token for deploying nuget packages."
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Title - NuGet Publish Demo
      uses: ./.github/actions/output-demo-title
      with:
        title: NuGet Publish Demo
        path: ./.github/actions/demo-nuget-publish
    - name: Setup summary file
      shell: bash
      run: |
        echo "SUMMARY_FILE=$GITHUB_WORKSPACE/demo-nuget-publish-summary.txt" >> $GITHUB_ENV
        : > $GITHUB_WORKSPACE/demo-nuget-publish-summary.txt

    - name: Run nuget/publish with missing inputs (expected fail)
      id: nuget_publish_missing
      continue-on-error: true
      uses: ./nuget/publish
      with:
        additional-build-args: ${{ inputs.additional-build-args }}
        additional-pack-args: ${{ inputs.additional-pack-args }}
        directory: ""
        dotnet-version: "8.0.x"
        github-token: ${{ inputs.github-token }}
        project-file: ""

    - name: Assert missing inputs caused failure
      uses: ./src/testing/assert
      with:
        expected: failure
        mode: exact
        actual: ${{ steps.nuget_publish_missing.outcome }}
        test-name: "missing inputs -> failure"
        summary-file: ${{ env.SUMMARY_FILE }}

    - name: Run nuget/publish (expected to fail push)
      id: nuget_publish
      continue-on-error: true
      uses: ./nuget/publish
      with:
        additional-build-args: ${{ inputs.additional-build-args }}
        additional-pack-args: ${{ inputs.additional-pack-args }}
        directory: ${{ inputs.directory }}
        dotnet-version: "8.0.x"
        github-token: ${{ inputs.github-token }}
        project-regex: 'Api\.csproj$'

    - name: Assert remote publish without token failed
      uses: ./src/testing/assert
      with:
        expected: failure
        mode: exact
        actual: ${{ steps.nuget_publish.outcome }}
        test-name: "remote publish without token -> failure"
        summary-file: ${{ env.SUMMARY_FILE }}

    - name: Assert nupkg exists
      uses: ./src/testing/assert
      with:
        expected: present
        mode: present
        actual: ${{ (hashFiles('nupkgs/*.nupkg') != '') && 'present' || '' }}
        test-name: "nupkg was produced by pack"
        summary-file: ${{ env.SUMMARY_FILE }}

    - name: Run nuget/publish (success to local folder)
      id: nuget_publish_success
      uses: ./nuget/publish
      with:
        additional-build-args: ${{ inputs.additional-build-args }}
        additional-pack-args: ${{ inputs.additional-pack-args }}
        directory: ${{ inputs.directory }}
        dotnet-version: "8.0.x"
        github-token: ${{ inputs.github-token }}
        project-regex: 'Api\.csproj$'
        publish-source: ".artifacts/nuget-local"

    - name: List local publish folder
      shell: bash
      run: |
        mkdir -p .artifacts/nuget-local
        ls -la .artifacts/nuget-local || true

    - name: Assert locally published nupkg exists
      uses: ./src/testing/assert
      with:
        expected: present
        mode: present
        actual: ${{ (hashFiles('.artifacts/nuget-local/*.nupkg') != '') && 'present' || '' }}
        test-name: "local publish succeeded"
        summary-file: ${{ env.SUMMARY_FILE }}

    - name: Run nuget/publish using project-file (success to local folder)

      id: nuget_publish_pf
      uses: ./nuget/publish
      with:
        additional-build-args: ${{ inputs.additional-build-args }}
        additional-pack-args: ${{ inputs.additional-pack-args }}
        directory: ""
        project-file: src/demo/dotnet/src/Api/Api.csproj
        dotnet-version: "8.0.x"
        github-token: ${{ inputs.github-token }}
        publish-source: ".artifacts/nuget-local-pf"

    - name: Assert locally published nupkg exists (project-file)
      uses: ./src/testing/assert
      with:
        expected: present
        mode: present
        actual: ${{ (hashFiles('.artifacts/nuget-local-pf/*.nupkg') != '') && 'present' || '' }}
        test-name: "local publish with project-file succeeded"
        summary-file: ${{ env.SUMMARY_FILE }}

    - name: Prepare symbol fixtures
      shell: bash
      run: |
        FIXTURES="$GITHUB_WORKSPACE/.artifacts/symbol-fixtures"
        RESULTS="$GITHUB_WORKSPACE/.artifacts/symbol-results"
        rm -rf "$FIXTURES" "$RESULTS"
        mkdir -p "$FIXTURES/no-symbols/nupkgs"
        printf 'package' > "$FIXTURES/no-symbols/nupkgs/Sample.1.0.0.nupkg"
        mkdir -p "$FIXTURES/both-symbols/nupkgs" "$FIXTURES/snupkg-only/nupkgs" "$FIXTURES/legacy-symbols-only/nupkgs"
        cp "$FIXTURES/no-symbols/nupkgs/Sample.1.0.0.nupkg" "$FIXTURES/both-symbols/nupkgs/Sample.1.0.0.nupkg"
        cp "$FIXTURES/no-symbols/nupkgs/Sample.1.0.0.nupkg" "$FIXTURES/snupkg-only/nupkgs/Sample.1.0.0.nupkg"
        cp "$FIXTURES/no-symbols/nupkgs/Sample.1.0.0.nupkg" "$FIXTURES/legacy-symbols-only/nupkgs/Sample.1.0.0.nupkg"
        printf 'modern symbols' > "$FIXTURES/both-symbols/nupkgs/Sample.1.0.0.snupkg"
        printf 'legacy symbols' > "$FIXTURES/both-symbols/nupkgs/Sample.1.0.0.symbols.nupkg"
        printf 'modern symbols' > "$FIXTURES/snupkg-only/nupkgs/Sample.1.0.0.snupkg"
        printf 'legacy symbols' > "$FIXTURES/legacy-symbols-only/nupkgs/Sample.1.0.0.symbols.nupkg"
        echo "SYMBOL_FIXTURE_ROOT=$FIXTURES" >> "$GITHUB_ENV"
        echo "SYMBOL_RESULTS_ROOT=$RESULTS" >> "$GITHUB_ENV"
        ls -R "$FIXTURES"

    - name: Publish fixtures - no symbols
      shell: bash
      run: node "$GITHUB_WORKSPACE/nuget/publish/publish.js"
      env:
        GITHUB_WORKSPACE: ${{ env.SYMBOL_FIXTURE_ROOT }}/no-symbols
        INPUT_PACKAGE_DIRECTORY: ${{ env.SYMBOL_FIXTURE_ROOT }}/no-symbols/nupkgs
        INPUT_PUBLISH_SOURCE: ${{ env.SYMBOL_RESULTS_ROOT }}/no-symbols

    - name: Assert fixture publish (no symbols) copied packages only
      uses: ./src/testing/assert
      with:
        expected: present
        mode: present
        actual: ${{ (hashFiles('.artifacts/symbol-results/no-symbols/*.nupkg') != '') && 'present' || '' }}
        test-name: "no symbols - nupkg present"
        summary-file: ${{ env.SUMMARY_FILE }}
    - name: Assert fixture publish (no symbols) has no snupkg
      uses: ./src/testing/assert
      with:
        expected: absent
        mode: absent
        actual: ${{ (hashFiles('.artifacts/symbol-results/no-symbols/*.snupkg') != '') && 'present' || '' }}
        test-name: "no symbols - snupkg absent"
        summary-file: ${{ env.SUMMARY_FILE }}
    - name: Assert fixture publish (no symbols) has no legacy symbols
      uses: ./src/testing/assert
      with:
        expected: absent
        mode: absent
        actual: ${{ (hashFiles('.artifacts/symbol-results/no-symbols/*.symbols.nupkg') != '') && 'present' || '' }}
        test-name: "no symbols - legacy symbols absent"
        summary-file: ${{ env.SUMMARY_FILE }}

    - name: Publish fixtures - both symbol types
      shell: bash
      run: node "$GITHUB_WORKSPACE/nuget/publish/publish.js"
      env:
        GITHUB_WORKSPACE: ${{ env.SYMBOL_FIXTURE_ROOT }}/both-symbols
        INPUT_PACKAGE_DIRECTORY: ${{ env.SYMBOL_FIXTURE_ROOT }}/both-symbols/nupkgs
        INPUT_PUBLISH_SOURCE: ${{ env.SYMBOL_RESULTS_ROOT }}/both-symbols

    - name: Assert fixture publish (both) copied nupkg
      uses: ./src/testing/assert
      with:
        expected: present
        mode: present
        actual: ${{ (hashFiles('.artifacts/symbol-results/both-symbols/*.nupkg') != '') && 'present' || '' }}
        test-name: "both symbols - nupkg present"
        summary-file: ${{ env.SUMMARY_FILE }}
    - name: Assert fixture publish (both) copied snupkg
      uses: ./src/testing/assert
      with:
        expected: present
        mode: present
        actual: ${{ (hashFiles('.artifacts/symbol-results/both-symbols/*.snupkg') != '') && 'present' || '' }}
        test-name: "both symbols - snupkg present"
        summary-file: ${{ env.SUMMARY_FILE }}
    - name: Assert fixture publish (both) copied legacy symbols
      uses: ./src/testing/assert
      with:
        expected: present
        mode: present
        actual: ${{ (hashFiles('.artifacts/symbol-results/both-symbols/*.symbols.nupkg') != '') && 'present' || '' }}
        test-name: "both symbols - legacy present"
        summary-file: ${{ env.SUMMARY_FILE }}

    - name: Publish fixtures - snupkg only
      shell: bash
      run: node "$GITHUB_WORKSPACE/nuget/publish/publish.js"
      env:
        GITHUB_WORKSPACE: ${{ env.SYMBOL_FIXTURE_ROOT }}/snupkg-only
        INPUT_PACKAGE_DIRECTORY: ${{ env.SYMBOL_FIXTURE_ROOT }}/snupkg-only/nupkgs
        INPUT_PUBLISH_SOURCE: ${{ env.SYMBOL_RESULTS_ROOT }}/snupkg-only

    - name: Assert fixture publish (snupkg only) copied snupkg
      uses: ./src/testing/assert
      with:
        expected: present
        mode: present
        actual: ${{ (hashFiles('.artifacts/symbol-results/snupkg-only/*.snupkg') != '') && 'present' || '' }}
        test-name: "snupkg only - snupkg present"
        summary-file: ${{ env.SUMMARY_FILE }}
    - name: Assert fixture publish (snupkg only) lacks legacy symbols
      uses: ./src/testing/assert
      with:
        expected: absent
        mode: absent
        actual: ${{ (hashFiles('.artifacts/symbol-results/snupkg-only/*.symbols.nupkg') != '') && 'present' || '' }}
        test-name: "snupkg only - legacy symbols absent"
        summary-file: ${{ env.SUMMARY_FILE }}

    - name: Publish fixtures - legacy symbols only
      shell: bash
      run: node "$GITHUB_WORKSPACE/nuget/publish/publish.js"
      env:
        GITHUB_WORKSPACE: ${{ env.SYMBOL_FIXTURE_ROOT }}/legacy-symbols-only
        INPUT_PACKAGE_DIRECTORY: ${{ env.SYMBOL_FIXTURE_ROOT }}/legacy-symbols-only/nupkgs
        INPUT_PUBLISH_SOURCE: ${{ env.SYMBOL_RESULTS_ROOT }}/legacy-symbols-only

    - name: Assert fixture publish (legacy only) copied legacy symbols
      uses: ./src/testing/assert
      with:
        expected: present
        mode: present
        actual: ${{ (hashFiles('.artifacts/symbol-results/legacy-symbols-only/*.symbols.nupkg') != '') && 'present' || '' }}
        test-name: "legacy only - legacy symbols present"
        summary-file: ${{ env.SUMMARY_FILE }}
    - name: Assert fixture publish (legacy only) lacks snupkg
      uses: ./src/testing/assert
      with:
        expected: absent
        mode: absent
        actual: ${{ (hashFiles('.artifacts/symbol-results/legacy-symbols-only/*.snupkg') != '') && 'present' || '' }}
        test-name: "legacy only - snupkg absent"
        summary-file: ${{ env.SUMMARY_FILE }}

    - name: Summary
      shell: bash
      if: always()
      run: |
        echo "### Demo nuget/publish" >> $GITHUB_STEP_SUMMARY
        echo "All Tests:" >> $GITHUB_STEP_SUMMARY
        cat "$SUMMARY_FILE" >> $GITHUB_STEP_SUMMARY
